{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin/admin.component.css","webpack:///./src/app/admin/admin.component.html","webpack:///./src/app/admin/admin.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth/auth-interceptor.ts","webpack:///./src/app/auth/auth.service.ts","webpack:///./src/app/auth/login-info.ts","webpack:///./src/app/auth/signup-info.ts","webpack:///./src/app/auth/token-storage.service.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/not-found/not-found.component.css","webpack:///./src/app/not-found/not-found.component.html","webpack:///./src/app/not-found/not-found.component.ts","webpack:///./src/app/pm/pm.component.css","webpack:///./src/app/pm/pm.component.html","webpack:///./src/app/pm/pm.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/services/user.service.ts","webpack:///./src/app/user/user.component.css","webpack:///./src/app/user/user.component.html","webpack:///./src/app/user/user.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<h4>Content from Server</h4>\\n{{board}}\\n{{errorMessage}}\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\n\nexport class AdminComponent implements OnInit {\n  board: string;\n  errorMessage: string;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getAdminBoard().subscribe(\n      data => {\n        this.board = data;\n      },\n      error => {\n        this.errorMessage = `${error.status}: ${JSON.parse(error.error).message}`;\n      }\n    );\n  }\n}","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { UserComponent } from './user/user.component';\r\nimport { PmComponent } from './pm/pm.component';\r\nimport { AdminComponent } from './admin/admin.component';\r\nimport { NotFoundComponent } from './not-found/not-found.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'home',\r\n        component: HomeComponent\r\n    },\r\n    {\r\n        path: 'user',\r\n        component: UserComponent\r\n    },\r\n    {\r\n        path: 'pm',\r\n        component: PmComponent\r\n    },\r\n    {\r\n        path: 'admin',\r\n        component: AdminComponent\r\n    },\r\n    {\r\n        path: 'login',\r\n        component: HomeComponent\r\n    },\r\n    {\r\n        path: 'signup',\r\n        component: HomeComponent\r\n    },\r\n    {path: '404', component: NotFoundComponent},\r\n    {path: '**', redirectTo: '/404'}\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"li {\\n    list-style: none;\\n}\"","module.exports = \"<nav class=\\\"navbar is-primary\\\" role=\\\"navigation\\\" aria-label=\\\"main navigation\\\">\\n    <div class=\\\"navbar-brand\\\">\\n      <a class=\\\"navbar-item\\\" href=\\\"https://bulma.io\\\">\\n        <img src=\\\"https://bulma.io/images/bulma-logo.png\\\" width=\\\"112\\\" height=\\\"28\\\">\\n      </a>\\n  \\n      <a role=\\\"button\\\" class=\\\"navbar-burger burger\\\" aria-label=\\\"menu\\\" aria-expanded=\\\"false\\\" data-target=\\\"navbarBasicExample\\\">\\n        <span aria-hidden=\\\"true\\\"></span>\\n        <span aria-hidden=\\\"true\\\"></span>\\n        <span aria-hidden=\\\"true\\\"></span>\\n      </a>\\n    </div>\\n  \\n    <div id=\\\"navbarBasicExample\\\" class=\\\"navbar-menu\\\" routerLinkActive=\\\"active\\\">\\n      <div class=\\\"navbar-start\\\">\\n        <a routerLink=\\\"home\\\" class=\\\"navbar-item\\\">\\n          Home\\n        </a>\\n  \\n        <a routerLink=\\\"user\\\" *ngIf=\\\"authority === 'user'\\\" class=\\\"navbar-item\\\">\\n          User Board\\n        </a>\\n        <a routerLink=\\\"pm\\\" *ngIf=\\\"authority === 'pm'\\\" class=\\\"navbar-item\\\">\\n            PM Board\\n        </a>\\n        <a routerLink=\\\"admin\\\" *ngIf=\\\"authority === 'admin'\\\" class=\\\"navbar-item\\\">\\n            Admin view\\n        </a>\\n  \\n        \\n      </div>\\n  \\n      <div class=\\\"navbar-end\\\">\\n        <div class=\\\"navbar-item\\\">\\n          <div *ngIf=\\\"!authority\\\" class=\\\"buttons\\\">\\n            <a routerLink=\\\"signup\\\" class=\\\"button is-primary\\\">\\n              <strong>Sign up</strong>\\n            </a>\\n            <a routerLink=\\\"login\\\" class=\\\"button is-light\\\">\\n              Log in\\n            </a>\\n          </div>\\n          <div *ngIf=\\\"authority\\\">\\n              <span  >UserName</span>\\n              <div class=\\\"navbar-item has-dropdown is-hoverable\\\">\\n                <a class=\\\"navbar-link\\\">\\n                  More\\n                </a>\\n        \\n                <div class=\\\"navbar-dropdown\\\">\\n                  <a class=\\\"navbar-item\\\">\\n                    About\\n                  </a>\\n                  <a class=\\\"navbar-item\\\">\\n                    Jobs\\n                  </a>\\n                  <a class=\\\"navbar-item\\\">\\n                    Contact\\n                  </a>\\n                  <hr class=\\\"navbar-divider\\\">\\n                  <a class=\\\"navbar-item\\\">\\n                    Report an issue\\n                  </a>\\n                </div>\\n              </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </nav>\\n<section class=\\\"section\\\">\\n  <div class=\\\"container  \\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</section>\"","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from './auth/token-storage.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  private roles: string[];\n  protected authority: string;\n\n  constructor(private tokenStorage: TokenStorageService) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.roles = this.tokenStorage.getAuthorities();\n      this.roles.every(role => {\n        if (role === 'ROLE_ADMIN') {\n          this.authority = 'admin';\n          return false;\n        } else if (role === 'ROLE_PM') {\n          this.authority = 'pm';\n          return false;\n        }\n        this.authority = 'user';\n        return true;\n      });\n    }\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { UserComponent } from './user/user.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HomeComponent } from './home/home.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { PmComponent } from './pm/pm.component';\n\nimport { httpInterceptorProviders } from './auth/auth-interceptor';\nimport { NotFoundComponent } from './not-found/not-found.component';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(fas);\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    UserComponent,\n    RegisterComponent,\n    HomeComponent,\n    AdminComponent,\n    PmComponent,\n    NotFoundComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule, \n    FontAwesomeModule\n  ],\n  providers: [httpInterceptorProviders],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\n\r\nimport { TokenStorageService } from './token-storage.service';\r\n\r\nconst TOKEN_HEADER_KEY = 'Authorization';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private token: TokenStorageService) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        let authReq = req;\r\n        const token = this.token.getToken();\r\n        if (token != null) {\r\n            authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n        }\r\n        return next.handle(authReq);\r\n    }\r\n}\r\n\r\nexport const httpInterceptorProviders = [\r\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n];\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { JwtResponse } from './jwt-response';\nimport { AuthLoginInfo } from './login-info';\nimport { SignUpInfo } from './signup-info';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private loginUrl = 'http://localhost:8080/api/auth/signin';\n  private signupUrl = 'http://localhost:8080/api/auth/signup';\n\n  constructor(private http: HttpClient) {\n  }\n\n  attemptAuth(credentials: AuthLoginInfo): Observable<JwtResponse> {\n    return this.http.post<JwtResponse>(this.loginUrl, credentials, httpOptions);\n  }\n\n  signUp(info: SignUpInfo): Observable<string> {\n    return this.http.post<string>(this.signupUrl, info, httpOptions);\n  }\n}\n","export class AuthLoginInfo {\r\n    username: string;\r\n    password: string;\r\n\r\n    constructor(username: string, password: string) {\r\n        this.username = username;\r\n        this.password = password;\r\n    }\r\n}\r\n","export class SignUpInfo {\r\n    name: string;\r\n    username: string;\r\n    email: string;\r\n    role: string[];\r\n    password: string;\r\n\r\n    constructor(name: string, username: string, email: string, password: string) {\r\n        this.name = name;\r\n        this.username = username;\r\n        this.email = email;\r\n        this.password = password;\r\n        this.role = ['user'];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'AuthToken';\nconst USERNAME_KEY = 'AuthUsername';\nconst AUTHORITIES_KEY = 'AuthAuthorities';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n  private roles: Array<string> = [];\n  constructor() { }\n\n  signOut() {\n    window.sessionStorage.clear();\n  }\n\n  public saveToken(token: string) {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public getToken(): string {\n    return sessionStorage.getItem(TOKEN_KEY);\n  }\n\n  public saveUsername(username: string) {\n    window.sessionStorage.removeItem(USERNAME_KEY);\n    window.sessionStorage.setItem(USERNAME_KEY, username);\n  }\n\n  public getUsername(): string {\n    return sessionStorage.getItem(USERNAME_KEY);\n  }\n\n  public saveAuthorities(authorities: string[]) {\n    window.sessionStorage.removeItem(AUTHORITIES_KEY);\n    window.sessionStorage.setItem(AUTHORITIES_KEY, JSON.stringify(authorities));\n  }\n\n  public getAuthorities(): string[] {\n    this.roles = [];\n\n    if (sessionStorage.getItem(TOKEN_KEY)) {\n      JSON.parse(sessionStorage.getItem(AUTHORITIES_KEY)).forEach(authority => {\n        this.roles.push(authority.authority);\n      });\n    }\n\n    return this.roles;\n  }\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"info.token; else loggedOut\\\">\\n  <section class=\\\"container is-fluid\\\">\\n    <h5 class=\\\"text-primary\\\">Your Information</h5>\\n    <p>\\n      <strong>Username:</strong> {{info.username}}<br/>\\n      <strong>Roles:</strong> {{info.authorities}}<br />\\n      <strong>Token:</strong> {{info.token}}.\\n    </p>\\n    <button (click)=\\\"logout()\\\">Log Out</button>\\n  </section>\\n</div>\\n\\n<ng-template #loggedOut>\\n  <div  class=\\\"columns is-centered is-fullheight\\\">\\n    <div id=\\\"presentation\\\" class=\\\"column is-8 is-desktop\\\">\\n        <section class=\\\"hero is-medium is-primary is-bold\\\">\\n          <div class=\\\"hero-body\\\">\\n            <div class=\\\"container\\\">\\n              <h1 class=\\\"title\\\">\\n                Primary bold title\\n              </h1>\\n              <h2 class=\\\"subtitle\\\">\\n                Primary bold subtitle\\n              </h2>\\n              <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Voluptatum similique deleniti earum recusandae assumenda velit omnis ratione nobis natus beatae, unde eos temporibus sint esse dolore. Quibusdam modi blanditiis dolore?</p>\\n            </div>\\n          </div>\\n        </section>\\n    </div>\\n    <div id=\\\"form\\\" class=\\\"column is-vertical has-background-danger\\\">\\n      <div class=\\\"card\\\">\\n        <app-login *ngIf=\\\"!isRegisterForm\\\"></app-login>\\n        <app-register *ngIf=\\\"isRegisterForm\\\"></app-register>\\n      </div>\\n      <hr>\\n      <a (click)='toggleFormView()'class=\\\"has-text-centered\\\" *ngIf=\\\"!isRegisterForm\\\">Doesn't have an account ? </a>\\n      <a (click)='toggleFormView()'class=\\\"has-text-centered\\\" *ngIf=\\\"isRegisterForm\\\">Already have an account ? </a>\\n    </div>\\n  </div>\\n</ng-template>\"","import { Component, OnInit } from '@angular/core';\n\nimport { TokenStorageService } from '../auth/token-storage.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  info: any;\n  isRegisterForm: boolean;\n\n  constructor(private token: TokenStorageService) { }\n\n  ngOnInit() {\n    this.info = {\n      token: this.token.getToken(),\n      username: this.token.getUsername(),\n      authorities: this.token.getAuthorities()\n    };\n    this.checkFormView();\n  }\n\n  logout() {\n    this.token.signOut();\n    window.location.reload();\n  }\n  toggleFormView(){\n    this.isRegisterForm = !this.isRegisterForm;\n  }\n\n  checkFormView() {\n    this.isRegisterForm =  window.location.pathname.includes('signup') ? true : false;\n  }\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"isLoggedIn; else loggedOut\\\">\\n  Logged in as {{roles}}.\\n</div>\\n\\n<ng-template #loggedOut>\\n      <div class=\\\"card-header has-background-primary\\\">\\n        <h1 class=\\\"card-header-title title has-text-centered has-text-light\\\">Log In</h1>\\n      </div>\\n      <div class=\\\"card-content\\\">\\n        <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\n          <div class=\\\"field\\\">\\n            <p class=\\\"control has-icons-left has-icons-right\\\">\\n              <input class=\\\"input\\\" type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"username\\\" [(ngModel)]=\\\"form.username\\\" #username=\\\"ngModel\\\" required>\\n              <span class=\\\"icon is-small is-left\\\">\\n                <i class=\\\"fas fa-user\\\"></i>\\n              </span>\\n              <span class=\\\"icon is-small is-right\\\">\\n                <i *ngIf=\\\"f.submitted && !username.invalid\\\" class=\\\"fas fa-check\\\"></i>\\n                <i *ngIf=\\\"f.submitted && username.invalid\\\" class=\\\"fas fa-times\\\"></i>\\n              </span>\\n            </p>\\n            <div *ngIf=\\\"f.submitted && username.invalid\\\">\\n              <span *ngIf=\\\"username.errors.required\\\">Username is required</span>\\n            </div>\\n          </div>\\n          <div class=\\\"field\\\">\\n            <p class=\\\"control has-icons-left has-icons-right\\\">\\n              <input class=\\\"input\\\" type=\\\"password\\\" placeholder=\\\"Password\\\" name=\\\"password\\\" [(ngModel)]=\\\"form.password\\\" #password=\\\"ngModel\\\" required minlength=\\\"6\\\" >\\n              <span class=\\\"icon is-small is-left\\\">\\n                <i class=\\\"fas fa-lock\\\"></i>\\n              </span>\\n              <span class=\\\"icon is-small is-right\\\">\\n                  <i *ngIf=\\\"f.submitted && !password.invalid\\\" class=\\\"fas fa-check\\\"></i>\\n                  <i *ngIf=\\\"f.submitted && password.invalid\\\" class=\\\"fas fa-times\\\"></i>\\n                </span>\\n            </p>\\n            <div *ngIf=\\\"f.submitted && password.invalid\\\">\\n                <span *ngIf=\\\"password.errors.required\\\">Password is required</span>\\n                <span *ngIf=\\\"password.errors.minlength\\\">Password must be at least 6 characters</span>\\n            </div>\\n          </div>\\n          <div class=\\\"field\\\">\\n              <p class=\\\"control\\\">\\n                  <button class=\\\"button\\\">Forgot password ?</button>\\n                  <button class=\\\"button is-primary is-pulled-right\\\">Login</button>\\n              </p>\\n              \\n              <span *ngIf=\\\"f.submitted && isLoginFailed\\\" class=\\\"\\\">\\n                  Login failed: {{errorMessage}}\\n              </span>\\n          </div>\\n          </form>\\n      </div>\\n</ng-template>\"","import { Component, OnInit } from '@angular/core';\n\nimport { AuthService } from '../auth/auth.service';\nimport { TokenStorageService } from '../auth/token-storage.service';\nimport { AuthLoginInfo } from '../auth/login-info';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n  private loginInfo: AuthLoginInfo;\n\n  constructor(private authService: AuthService, private tokenStorage: TokenStorageService) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getAuthorities();\n    }\n  }\n\n  onSubmit() {\n    console.log(this.form);\n\n    this.loginInfo = new AuthLoginInfo(\n      this.form.username,\n      this.form.password);\n\n    this.authService.attemptAuth(this.loginInfo).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUsername(data.username);\n        this.tokenStorage.saveAuthorities(data.authorities);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getAuthorities();\n        this.reloadPage();\n      },\n      error => {\n        console.log(error);\n        this.errorMessage = error.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  reloadPage() {\n    window.location.reload();\n  }\n}\n","module.exports = \"\"","module.exports = \"<p>\\n  not-found works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h4>Content from Server</h4>\\n{{board}}\\n{{errorMessage}}\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'app-pm',\n  templateUrl: './pm.component.html',\n  styleUrls: ['./pm.component.css']\n})\nexport class PmComponent implements OnInit {\n  board: string;\n  errorMessage: string;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getPMBoard().subscribe(\n      data => {\n        this.board = data;\n      },\n      error => {\n        this.errorMessage = `${error.status}: ${JSON.parse(error.error).message}`;\n      }\n    );\n  }\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"isSignedUp; else signupForm\\\">\\n  Your registration is successful. Please login!\\n</div>\\n\\n<ng-template #signupForm>\\n    <div class=\\\"card-header has-background-primary\\\">\\n      <h1 class=\\\"card-header-title title has-text-centered has-text-light\\\">Sign Up</h1>\\n    </div>\\n    <div class=\\\"card-content\\\">\\n      <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\n          <div class=\\\"field\\\">\\n              <p class=\\\"control has-icons-left has-icons-right\\\">\\n                <input class=\\\"input\\\" type=\\\"text\\\" placeholder=\\\"Name\\\" name=\\\"name\\\" [(ngModel)]=\\\"form.name\\\" #name=\\\"ngModel\\\" required>\\n                <span class=\\\"icon is-small is-left\\\">\\n                  <i class=\\\"fas fa-user\\\"></i>\\n                </span>\\n                <span class=\\\"icon is-small is-right\\\">\\n                  <i *ngIf=\\\"f.submitted && !name.invalid\\\" class=\\\"fas fa-check\\\"></i>\\n                  <i *ngIf=\\\"f.submitted && name.invalid\\\" class=\\\"fas fa-times\\\"></i>\\n                </span>\\n              </p>\\n              <div *ngIf=\\\"f.submitted && username.invalid\\\">\\n                <span *ngIf=\\\"name.errors.required\\\">Name is required</span>\\n              </div>\\n            </div>\\n            <div class=\\\"field\\\">\\n              <p class=\\\"control has-icons-left has-icons-right\\\">\\n                <input class=\\\"input\\\" type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"name\\\" [(ngModel)]=\\\"form.name\\\" #name=\\\"ngModel\\\" required>\\n                <span class=\\\"icon is-small is-left\\\">\\n                  <i class=\\\"fas fa-user\\\"></i>\\n                </span>\\n                <span class=\\\"icon is-small is-right\\\">\\n                  <i *ngIf=\\\"f.submitted && !username.invalid\\\" class=\\\"fas fa-check\\\"></i>\\n                  <i *ngIf=\\\"f.submitted && username.invalid\\\" class=\\\"fas fa-times\\\"></i>\\n                </span>\\n              </p>\\n              <div *ngIf=\\\"f.submitted && username.invalid\\\">\\n                <span *ngIf=\\\"username.errors.required\\\">Username is required</span>\\n              </div>\\n            </div>\\n        <div class=\\\"field\\\">\\n          <p class=\\\"control has-icons-left has-icons-right\\\">\\n            <input class=\\\"input\\\" placeholder=\\\"Email\\\" type=\\\"text\\\" name=\\\"email\\\" [(ngModel)]=\\\"form.email\\\" #email=\\\"ngModel\\\" required email>\\n            <span class=\\\"icon is-small is-left\\\">\\n              <i class=\\\"fas fa-envelope\\\"></i>\\n            </span>\\n            <span class=\\\"icon is-small is-right\\\">\\n              <i *ngIf=\\\"f.submitted && !email.invalid\\\" class=\\\"fas fa-check\\\"></i>\\n              <i *ngIf=\\\"f.submitted && email.invalid\\\" class=\\\"fas fa-times\\\"></i>\\n            </span>\\n          </p>\\n          <div *ngIf=\\\"f.submitted && email.invalid\\\">\\n            <span *ngIf=\\\"email.errors.required\\\">Email is required</span>\\n            <span *ngIf=\\\"email.errors.email\\\">Email must be a valid email address</span>\\n          </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <p class=\\\"control has-icons-left has-icons-right\\\">\\n            <input class=\\\"input\\\" type=\\\"password\\\" placeholder=\\\"Password\\\" name=\\\"password\\\" [(ngModel)]=\\\"form.password\\\" #password=\\\"ngModel\\\" required minlength=\\\"6\\\" >\\n            <span class=\\\"icon is-small is-left\\\">\\n              <i class=\\\"fas fa-lock\\\"></i>\\n            </span>\\n            <span class=\\\"icon is-small is-right\\\">\\n                <i *ngIf=\\\"f.submitted && !password.invalid\\\" class=\\\"fas fa-check\\\"></i>\\n                <i *ngIf=\\\"f.submitted && password.invalid\\\" class=\\\"fas fa-times\\\"></i>\\n              </span>\\n          </p>\\n          <div *ngIf=\\\"f.submitted && password.invalid\\\">\\n              <span *ngIf=\\\"password.errors.required\\\">Password is required</span>\\n              <span *ngIf=\\\"password.errors.minlength\\\">Password must be at least 6 characters</span>\\n          </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <p class=\\\"control\\\">\\n                <button class=\\\"button is-primary is-clearfix\\\">Login</button>\\n            </p>\\n            \\n            <span *ngIf=\\\"f.submitted && isLoginFailed\\\" class=\\\"\\\">\\n                Login failed: {{errorMessage}}\\n            </span>\\n        </div>\\n        </form>\\n    </div>\\n</ng-template>\"","import { Component, OnInit } from '@angular/core';\n\nimport { AuthService } from '../auth/auth.service';\nimport { SignUpInfo } from '../auth/signup-info';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  form: any = {};\n  signupInfo: SignUpInfo;\n  isSignedUp = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit() { }\n\n  onSubmit() {\n    console.log(this.form);\n\n    this.signupInfo = new SignUpInfo(\n      this.form.name,\n      this.form.username,\n      this.form.email,\n      this.form.password);\n\n    this.authService.signUp(this.signupInfo).subscribe(\n      data => {\n        console.log(data);\n        this.isSignedUp = true;\n        this.isSignUpFailed = false;\n      },\n      error => {\n        console.log(error);\n        this.errorMessage = error.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private userUrl = 'http://localhost:8080/api/test/user';\n  private pmUrl = 'http://localhost:8080/api/test/pm';\n  private adminUrl = 'http://localhost:8080/api/test/admin';\n\n  constructor(private http: HttpClient) { }\n\n  getUserBoard(): Observable<string> {\n    return this.http.get(this.userUrl, { responseType: 'text' });\n  }\n\n  getPMBoard(): Observable<string> {\n    return this.http.get(this.pmUrl, { responseType: 'text' });\n  }\n\n  getAdminBoard(): Observable<string> {\n    return this.http.get(this.adminUrl, { responseType: 'text' });\n  }\n}\n","module.exports = \"\"","module.exports = \"<h4>Content from Server</h4>\\n{{board}}\\n{{errorMessage}}\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n  board: string;\n  errorMessage: string;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getUserBoard().subscribe(\n      data => {\n        this.board = data;\n      },\n      error => {\n        this.errorMessage = `${error.status}: ${JSON.parse(error.error).message}`;\n      }\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}